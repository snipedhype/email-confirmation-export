import imaplib
import email.header
import csv
from bs4 import BeautifulSoup
from datetime import datetime
import email
from email import message_from_bytes
import locale
import re

def read_config(filename):
    config = {}
    with open(filename, 'r') as file:
        for line in file:
            key, value = line.strip().split('=')
            config[key] = value
    return config.get('email_address'), config.get('app_password')

def write_to_processed_list(tracking_number):
    with open('processed_tracking_numbers.txt', 'a') as file:
        file.write(f'{tracking_number}\n')

def check_if_email_processed(tracking_number):
    with open('processed_tracking_numbers.txt', 'r') as file:
        for line in file:
            if line.strip() == tracking_number:
                return True
    return False

def get_order_number(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    order_number_element = soup.find('td', class_='header-ordernum')
    
    if order_number_element:
        order_number_link = order_number_element.find('a')
        
        if order_number_link:
            order_number = order_number_link.text.strip()
            return order_number
    
    return 'unknown'

def get_order_date(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    order_date_element = soup.find('h2', class_='banner-headline2')

    if order_date_element:
        original_date_string = order_date_element.text.strip()
        if 'Placed' not in original_date_string:
            return 'unknown'
        # print(f'Original date string: {original_date_string}')
        date_obj = datetime.strptime(original_date_string, "Placed %B %d, %Y")
        order_date = date_obj.strftime("%m/%d/%y")
        # print (f'Formatted date: {order_date}')
        
        return order_date

    return 'unknown'



def get_delivery_address(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    delivery_address_element = soup.find('p', class_='ship-address')
    
    if delivery_address_element:
        address_text = delivery_address_element.text.strip()
        delivery_address = address_text.replace("Delivers to:", "").strip()
        return delivery_address
    
    return 'unknown'

def get_tracking_number(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    
    # Find the <p> element containing the tracking number
    tracking_p = soup.find('p', text=lambda text: text and re.search(r'(FEDEX GROUND|United Parcel Service|United States Postal Service) Tracking #', text)) # depreciated
    
    if tracking_p:
        # Extract the tracking number using a regular expression
        match = re.search(r'(FEDEX GROUND|United Parcel Service|United States Postal Service) Tracking # ([\w\d]+)', tracking_p.text)
        if match:
            carrier = match.group(1).strip()
            tracking_number = match.group(2).strip()
            
            return tracking_number, carrier
    
    return None

def get_item_names(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    item_names = []
    for item_name_element in soup.find_all('td', class_='product-image'):
        alt_text = item_name_element.find('img').get('alt', '')
        item_name = alt_text.strip() if alt_text else 'unknown'
        item_names.append(item_name)
    return item_names

def get_item_quantities(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    item_quantities = []
    for item_quantity_element in soup.find_all('td', class_='product-details', text=lambda text: text and 'Qty:' in text):
        # Extract the quantity from the element's text
        quantity_text = item_quantity_element.text.strip()
        # Use regular expressions to extract the quantity
        match = re.search(r'Qty:\s*(\d+)', quantity_text)
        if match:
            item_quantity = int(match.group(1))
            item_quantities.append(item_quantity)
        else:
            item_quantities.append(None)  # or 'unknown', or 0, depending on how you want to handle missing data
    return item_quantities


def itemnametoupc(item_name, UPC_list_file_path):
    try:
        with open(UPC_list_file_path, 'r') as file:
            for line in file:
                # Split each line into UPC and item name
                parts = line.strip().split('==')
                if len(parts) == 2:
                    upc, name = parts
                    if item_name.lower() in name.lower():
                        return upc
        # If no match is found, return unknown
        return 'unknown'
    except FileNotFoundError:
        print(f"File not found: {UPC_list_file_path}")
        return None
    
def process_and_write_to_csv(output_csv_writer, submission_csv_writer, email_message, email_subject, email_id):
    order_number = None
    delivery_address = None
    tracking_number = None
    item_name = None
    item_quantity = None
    
    if "Get ready for something special!" in email_subject:
        for part in email_message.walk():
            if part.get_content_type() == "text/html":
                email_content = part.get_payload(decode=True).decode("utf-8", errors="ignore")
                
                try:
                    tracking_number, carrier = get_tracking_number(email_content)
                    if not check_if_email_processed(tracking_number):
                        order_number = get_order_number(email_content)
                        with open(f'email_log/{order_number}_email_content.txt', 'w', encoding='utf-8') as txt_file:
                            txt_file.write(email_content)
                        
                        order_number = get_order_number(email_content)
                        delivery_address = get_delivery_address(email_content)
                        
                        item_names = get_item_names(email_content)
                        item_quantities = get_item_quantities(email_content)
                        
                        for item_name, item_quantity in zip(item_names, item_quantities):
                            item_upc = itemnametoupc(item_name, UPC_list_file_path)
                            
                            if tracking_number is not None:
                                output_csv_writer.writerow([tracking_number, item_upc, item_quantity, order_number, delivery_address])
                                submission_csv_writer.writerow([tracking_number, item_upc, item_quantity])
                                print(f'Order number {order_number} shipped with {carrier}, shipping details logged to CSV')
                                write_to_processed_list(tracking_number)
                                print(f'Tracking number {tracking_number} added to processed list')
                            else:
                                print(f'No tracking number found for order: {order_number}')
                                output_csv_writer.writerow(['unshipped', item_upc, item_quantity, order_number, delivery_address])
                    else:
                        print('Email already processed - skipping')
                except Exception as e:
                    print(f'Failed to process email: {str(e)}')
                    with open(f'email_content.txt', 'w', encoding='utf-8') as txt_file:
                        txt_file.write(email_content)
    else:
        print('Not a shipping email - skipping')

def search_emails_from_specific_senders(email_address, app_password, senders):
    try:
        imap_server = imaplib.IMAP4_SSL('imap.gmail.com')
        imap_server.login(email_address, app_password)
        mailbox = 'inbox'
        imap_server.select(mailbox)

        # make the list of email ids and start it as empty
        email_id_list = []

        for sender in senders:
            # search for emails from the sender
            search_query = f'(FROM "{sender}")'
            result, email_ids = imap_server.search(None, search_query)
            
            if result == 'OK':
                email_id_list.extend(email_ids[0].split())

        # Remove duplicate email IDs
        email_id_list = list(set(email_id_list))

        print(f'Found {len(email_id_list)} emails from Target')

        # make timestamp
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

        output_csv_with_timestamp = f"tracking_csvs/target_order_log_{timestamp}.csv"
        submission_csv_with_timestamp = f"tracking_csvs/target_tracking_{timestamp}_submission.csv"

        with open(output_csv_with_timestamp, mode='w', newline='') as csv_output_file, \
        open(submission_csv_with_timestamp, mode='w', newline='') as csv_submission_file:
            output_csv_writer = csv.writer(csv_output_file)
            submission_csv_writer = csv.writer(csv_submission_file)
        # CSV headers
            output_csv_writer.writerow(['Tracking Number', 'UPC', 'Item QTY', 'Order Number', 'Delivery Address'])
            print(f'Wrote CSV file headers')
            
            for email_id in email_id_list:
                result, email_data = imap_server.fetch(email_id, '(RFC822)')
                if result == 'OK':
                    email_message = email.message_from_bytes(email_data[0][1])
                    email_subject = email_message.get("Subject", "")
                    # print (f'Processing email with subject: {email_subject}')
                    
                    process_and_write_to_csv(output_csv_writer, submission_csv_writer, email_message, email_subject, email_id)
        #if unshipped_order_email_ids:
            # handle unshipped orders here
                    

        imap_server.logout()
    except Exception as e:
        print(f'Failed to search emails: {str(e)}')

if __name__ == "__main__":
    config_filename = "config.txt"
    email_address, app_password = read_config(config_filename)
    sender_emails_to_search = ["orders@oe.target.com", "orders@oe1.target.com"]
    UPC_list_file_path = "UPClist.txt"
    search_emails_from_specific_senders(email_address, app_password, sender_emails_to_search)
    print ("Email processing complete")