import imaplib
import email.header
import csv
from bs4 import BeautifulSoup
from datetime import datetime
import email
from email import message_from_bytes
import locale
import re

def read_config(filename):
    config = {}
    with open(filename, 'r') as file:
        for line in file:
            key, value = line.strip().split('=')
            config[key] = value
    return config.get('email_address'), config.get('app_password')


def get_order_number(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    order_number_element = soup.find('td', class_='header-ordernum')
    
    if order_number_element:
        order_number_link = order_number_element.find('a')
        
        if order_number_link:
            order_number = order_number_link.text.strip()
            return order_number
    
    return 'unknown'

def get_order_date(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    order_date_element = soup.find('h2', class_='banner-headline2')

    if order_date_element:
        original_date_string = order_date_element.text.strip()
        if 'Placed' not in original_date_string:
            return 'unknown'
        # print(f'Original date string: {original_date_string}')
        date_obj = datetime.strptime(original_date_string, "Placed %B %d, %Y")
        order_date = date_obj.strftime("%m/%d/%y")
        # print (f'Formatted date: {order_date}')
        
        return order_date

    return 'unknown'



def get_delivery_address(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    delivery_address_element = soup.find('p', class_='ship-address')
    
    if delivery_address_element:
        address_text = delivery_address_element.text.strip()
        delivery_address = address_text.replace("Delivers to:", "").strip()
        return delivery_address
    
    return 'unknown'

def get_tracking_number(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    
    # Find the <p> element containing the tracking number
    tracking_p = soup.find('p', text=lambda text: text and re.search(r'(United Parcel Service|United States Postal Service) Tracking #', text))
    
    if tracking_p:
        # Extract the tracking number using a regular expression
        match = re.search(r'(United Parcel Service|United States Postal Service) Tracking #\s*([\w\d]+)', tracking_p.text)
        if match:
            tracking_number = match.group(2).strip()
            return tracking_number
    
    return None

def get_item_name(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    item_name_element = soup.find('td', class_='product-image').find('img')
    alt_text = item_name_element.get('alt', '')
    return alt_text.strip() if alt_text else 'unknown'

def get_item_quantity(email_content):
    soup = BeautifulSoup(email_content, 'html.parser')
    item_quantity_element = soup.find('td', class_='product-details', text=lambda text: text and 'Qty:' in text)
    
    if item_quantity_element:
        # Extract the quantity from the element's text
        quantity_text = item_quantity_element.text.strip()
        # Use regular expressions to extract the quantity
        match = re.search(r'Qty:\s*(\d+)', quantity_text)
        if match:
            item_quantity = int(match.group(1))
            return item_quantity
    
    return None

def itemnametoupc(item_name, UPC_list_file_path):
    try:
        with open(UPC_list_file_path, 'r') as file:
            for line in file:
                # Split each line into UPC and item name
                parts = line.strip().split('==')
                if len(parts) == 2:
                    upc, name = parts
                    if item_name.lower() in name.lower():
                        return upc
        # If no match is found, return unknown
        return 'unknown'
    except FileNotFoundError:
        print(f"File not found: {UPC_list_file_path}")
        return None
    
def process_and_write_to_csv_or_txt(csv_writer, email_message, email_subject, email_id):
    order_number = None
    order_date = None
    delivery_address = None
    tracking_number = None
    item_name = None
    item_quantity = None
    unshipped_order_email_ids = []
    
    if "Get ready for something special!" in email_subject:
        for part in email_message.walk():
            if part.get_content_type() == "text/html":
                email_content = part.get_payload(decode=True).decode("utf-8", errors="ignore")
                #txt_file = open(f'{email_subject}_email_content.txt', 'w', encoding='utf-8')
                #txt_file.write(email_content)
                #txt_file.close()  # Close the file after writing

                try:
                    order_number = get_order_number(email_content)
                    #print(f'Order number found: {order_number}')
                    #order_date = get_order_date(email_content)
                    #print(f'Order date found: {order_date}')
                    delivery_address = get_delivery_address(email_content)
                    #print(f'Delivery address found: {delivery_address}')
                    tracking_number = get_tracking_number(email_content)
                    #print(f'Tracking number found: {tracking_number}')
                    item_name = get_item_name(email_content)
                    #print(f'Item name found: {item_name}')
                    item_quantity = get_item_quantity(email_content)
                    #print(f'Item quantity found: {item_quantity}')
                    item_upc = itemnametoupc(item_name, UPC_list_file_path)
                    #print(f'Item UPC found: {item_upc}')
                    
                    if tracking_number is not None:
                        csv_writer.writerow([tracking_number, item_upc, item_quantity, order_number, delivery_address])
                        print(f'Order number {order_number} shipping details logged to CSV')
                    else:
                        print(f'No tracking number found for order: {order_number}')
                        csv_writer.writerow(['unshipped', item_upc, item_quantity, order_number, delivery_address])
                
                except Exception as e:
                    print(f'Failed to process email: {str(e)}')
                    with open(f'email_content.txt', 'w', encoding='utf-8') as txt_file:
                        txt_file.write(email_content)  # Write the entire email content as a string
    else:
        print('Not a shipping email - skipping')
        #unshipped_order_email_ids.append(email_id)  # Add the email ID to the unshipped list
        return
    #return unshipped_order_email_ids

def search_emails_from_specific_senders(email_address, app_password, senders, output_csv):
    try:
        imap_server = imaplib.IMAP4_SSL('imap.gmail.com')
        imap_server.login(email_address, app_password)
        mailbox = 'inbox'
        imap_server.select(mailbox)

        # make the list of email ids and start it as empty
        email_id_list = []

        for sender in senders:
            # search for emails from the sender
            search_query = f'(FROM "{sender}")'
            result, email_ids = imap_server.search(None, search_query)
            
            if result == 'OK':
                email_id_list.extend(email_ids[0].split())

        # Remove duplicate email IDs
        email_id_list = list(set(email_id_list))

        print(f'Found {len(email_id_list)} emails from Target')

        # make timestamp
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

        output_csv_with_timestamp = f"target_tracking_{timestamp}.csv"

        with open(output_csv_with_timestamp, mode='w', newline='') as csv_file:
            csv_writer = csv.writer(csv_file)
            # CSV headers
            csv_writer.writerow(['Tracking Number', 'UPC', 'Item QTY', 'Order Number', 'Delivery Address'])

            for email_id in email_id_list:
                result, email_data = imap_server.fetch(email_id, '(RFC822)')
                if result == 'OK':
                    email_message = email.message_from_bytes(email_data[0][1])
                    email_subject = email_message.get("Subject", "")
                    print (f'Processing email with subject: {email_subject}')
                    
                    process_and_write_to_csv_or_txt(csv_writer, email_message, email_subject, email_id)
        #if unshipped_order_email_ids:
            # handle unshipped orders here
                    

        imap_server.logout()
    except Exception as e:
        print(f'Failed to search emails: {str(e)}')

if __name__ == "__main__":
    config_filename = "config.txt"
    email_address, app_password = read_config(config_filename)
    sender_emails_to_search = ["orders@oe.target.com", "orders@oe1.target.com"]
    output_csv = "target_tracking.csv"
    UPC_list_file_path = "UPClist.txt"
    search_emails_from_specific_senders(email_address, app_password, sender_emails_to_search, output_csv)